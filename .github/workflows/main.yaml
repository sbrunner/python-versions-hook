name: Continuous integration

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

permissions:
  contents: write
  id-token: write

env:
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}
  PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring

jobs:
  pre-commit:
    name: Pre commit
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    outputs:
      success: ${{ steps.success.outputs.success }}

    steps:
      - uses: actions/checkout@v4

      - name: GitHub event
        run: echo ${GITHUB_EVENT} | python3 -m json.tool
        env:
          GITHUB_EVENT: ${{ toJson(github) }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=.github/requirements.txt
      - run: pip install --editable=.

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
            pre-commit-
      - run: pre-commit run --all-files --color=always
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch; git diff --color; git reset --hard || true
        if: failure()

      - uses: actions/upload-artifact@v4
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()

      # Mark as success
      - id: success
        run: echo "::set-output name=success::true"

  main:
    name: Continuous integration
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    outputs:
      success: ${{ steps.success.outputs.success }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=.github/requirements.txt

      - run: poetry install --all-extras --all-groups

      - name: Prospector
        run: poetry run prospector --output-format=pylint

      - name: Tests
        run: poetry run pytest -vvv

      # Mark as success
      - id: success
        run: echo "::set-output name=success::true"

  publish:
    name: Publish
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    if: always() && !startsWith(github.event.head_commit.message, '[skip ci] ')
    needs:
      - pre-commit
      - main

    steps:
      - run: '[[ "${{ needs.pre-commit.outputs.success }}" == "true" ]]'
      - run: '[[ "${{ needs.main.outputs.success }}" == "true" ]]'

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: python3 -m pip install --requirement=.github/requirements.txt

      - name: Init pypi
        run: |-
          echo "[pypi]" > ~/.pypirc
          echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
          echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - name: Publish
        run: tag-publish
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.HAS_SECRETS == 'HAS_SECRETS'
      - run: git diff --exit-code --patch > /tmp/dpkg-versions.patch; git diff --color; git reset --hard || true
        if: failure()
      - uses: actions/upload-artifact@v4
        with:
          name: Update dpkg versions list.patch
          path: /tmp/dpkg-versions.patch
          retention-days: 1
        if: failure()
